알겠습니다! 업로드해주신 Jupyter 노트북들을 종합하여, 각 개념을 정리하고 관련 메서드들을 설명한 뒤, 실제 예제 코드와 그 결과까지 포함하는 복습용 `.ipynb` 파일을 만들어드릴게요.

노트북은 다음과 같은 구조로 구성하겠습니다:

- **개념 요약 (마크다운)**
- **주요 메서드 및 설명 (마크다운 + 예시)**
- **코드 예제 (Python 코드 + 출력)**

완성되면 곧 보여드릴게요!

# 넘파이, 판다스, Matplotlib 복습

## 넘파이 (Numpy)

**넘파이 개요:** NumPy는 파이썬에서 **과학 연산 및 배열 연산**을 위한 핵심 라이브러리입니다. 파이썬의 리스트보다 **효율적인 다차원 배열(ndarray)**을 제공하며, 벡터화 연산과 브로드캐스팅 등을 통해 **빠른 수치 계산**이 가능합니다. NumPy는 선형대수 연산, 난수 생성, 푸리에 변환 등을 지원하며, **SciPy, Pandas, Scikit-learn** 등의 다른 과학 컴퓨팅 라이브러리의 기반이 됩니다.

**데이터 구조와 용어:** NumPy에서는 스칼라(Scalar), 벡터(Vector), 행렬(Matrix), 텐서(Tensor)와 같은 개념을 다룹니다.  
- **스칼라(Scalar)**: 하나의 값으로 이루어진 0차원 데이터 (예: `7`).  
- **벡터(Vector)**: 1차원 배열(1D Tensor)로, 여러 값을 특정 순서로 모은 것.  
- **행렬(Matrix)**: 2차원 배열(2D Tensor)로, 벡터를 모아 표 형태로 구성한 것.  
- **텐서(Tensor)**: 3차원 이상 고차원 배열(ND Tensor)로, 동일한 크기의 행렬들이 모인 구조.  

이러한 배열은 **축(axis)**으로 차원을 구분합니다. 축의 개수가 **랭크(rank)**, 배열의 각 축 길이들의 튜플이 **shape(형상)**, 전체 원소 개수가 **size(크기)**입니다.

### 배열 생성과 속성

NumPy 배열은 `np.array(리스트)` 함수를 이용해 **파이썬 리스트로부터 생성**할 수 있습니다. 예를 들어:

```python
import numpy as np
arr1 = np.array([1, 5, 2, 3, 10, 1000])
print(type(arr1))
print(arr1)
```

*출력:*  
```python
<class 'numpy.ndarray'>
[   1    5    2    3   10 1000]
``` 

위와 같이 파이썬 리스트 `[1,5,2,...]`로부터 `ndarray` 객체 `arr1`이 생성됩니다. 다차원 리스트로 다차원 배열을 만들 수도 있습니다: 

```python
a2 = np.array([[1, 2], [3, 4], [5, 6]])
print(type(a2))
print(a2)
```

*출력:*  
```python
<class 'numpy.ndarray'>
[[1 2]
 [3 4]
 [5 6]]
``` 

이제 이 배열들의 **속성**을 확인해보겠습니다. NumPy 배열은 객체 속성으로 `shape` (형상), `dtype` (데이터 타입), `size` (원소 총개수), `ndim` (차원 수)를 제공합니다:

```python
print(arr1.shape, a2.shape)    # 각 배열의 형태 (튜플)
print(arr1.dtype, a2.dtype)    # 배열 원소들의 데이터 타입
print(arr1.size, a2.size)      # 전체 원소 개수
print(arr1.ndim, a2.ndim)      # 차원 수 (랭크)
```

*출력:*  
```python
(6,) (3, 2)
int64 int64
6 6
1 2
``` 

`arr1`은 6개의 원소로 이루어진 1차원 배열(`shape=(6,)`, `ndim=1`), `a2`는 3x2 형태의 2차원 배열(`shape=(3,2)`, `ndim=2`)입니다. 두 배열 모두 정수형(`int64`) 원소를 가지며 총 6개의 원소(`size=6`)를 포함합니다.

NumPy 배열은 **하나의 데이터 타입(dtype)**만 가지므로 모든 원소의 타입이 같습니다. `astype()` 메서드를 사용하면 배열의 **데이터 타입을 변환**할 수 있습니다:

```python
arr2 = arr1.astype('int8')  # arr1을 8비트 정수로 변환
print(arr2)
print(arr2.dtype)
```

*출력:*  
```python
[  1   5   2   3  10 -24]
int8
``` 

위 결과에서 `1000`이 int8 범위를 넘어서기 때문에 `-24`로 변환된 것을 확인할 수 있습니다. (int8은 -128~127 범위 표현)

### 특별한 값으로 배열 생성

NumPy는 일정한 패턴의 값을 가지는 배열을 쉽게 생성하는 함수를 제공합니다:

- **`np.zeros(shape, dtype)`**: 모든 원소가 0인 배열 생성.  
- **`np.ones(shape, dtype)`**: 모든 원소가 1인 배열 생성.  
- **`np.full(shape, fill_value, dtype)`**: 주어진 값으로 모든 원소를 채운 배열 생성.  
- **`np.zeros_like(arr)`, `np.ones_like(arr)`, `np.full_like(arr, val)`**: 주어진 배열과 동일한 shape로 0, 1, 지정값으로 채운 배열 생성.

예를 들어: 

```python
a = np.zeros(5)
print(a, a.dtype)
b = np.ones((2, 3))
print(b, b.dtype)
c = np.full((2, 2), 7)
print(c, c.dtype)
```

*출력:*  
```python
[0. 0. 0. 0. 0.] float64
[[1. 1. 1.]
 [1. 1. 1.]] float64
[[7 7]
 [7 7]] int64
``` 

별도로 dtype을 지정하지 않으면 `zeros/ones`는 기본적으로 부동소수점(float64)으로 생성됩니다 (`a`, `b`의 dtype이 float64인 점을 확인). `c`는 `fill_value=7`이 정수이므로 dtype이 int64로 설정되었습니다.

또한 `_like` 함수를 이용하면 기존 배열과 동일한 크기의 배열을 쉽게 만들 수 있습니다. 예를 들어 `arr3`가 2x3 배열일 때, `np.ones_like(arr3)`는 동일한 2x3 크기의 1로 채워진 배열을 만듭니다:

```python
l1 = [[1, 2, 3], [4, 5, 6]]
arr3 = np.array(l1, dtype='float64')  # 2x3 배열
print(arr3.shape)
# arr3와 동일한 shape로 0,1,100으로 채운 배열들 생성
print(np.zeros_like(arr3))
print(np.ones_like(arr3))
print(np.full_like(arr3, 100))
```

*출력:*  
```python
(2, 3)
[[0. 0. 0.]
 [0. 0. 0.]]
[[1. 1. 1.]
 [1. 1. 1.]]
[[100. 100. 100.]
 [100. 100. 100.]]
``` 

### 일정한 간격의 값으로 배열 생성

연속적인 숫자나 일정 간격의 숫자로 구성된 배열은 `arange`와 `linspace`로 생성할 수 있습니다:

- **`np.arange(start, stop, step, dtype)`**: `start`부터 `stop` **미만**까지 `step` 간격으로 증가하는 1차원 배열을 만듭니다. (파이썬 `range`와 유사하나, 실수 간격도 지원)  
- **`np.linspace(start, stop, num, endpoint=True)`**: `start`부터 `stop`까지 **포함하여** 균등 간격으로 `num`개의 값을 생성합니다. (`endpoint=False`이면 stop 제외)  

예시:

```python
a1 = np.arange(1, 10)        # 1부터 9까지
print("a1:", a1)
a2 = np.arange(0, 1.1, 0.1)  # 0.0부터 1.0까지 0.1 간격 (실수)
print("a2:", a2)
a3 = np.arange(20)           # 0부터 19까지 (stop만 주면 start=0, step=1)
print("a3:", a3)
a4 = np.arange(10, -11, -1)  # 10부터 -10까지 -1 간격 (역순)
print("a4:", a4)
```

*출력:*  
```python
a1: [1 2 3 4 5 6 7 8 9]
a2: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]
a3: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
a4: [ 10   9   8   7   6   5   4   3   2   1   0  -1  -2  -3  -4  -5  -6  -7
  -8  -9 -10]
``` 

`linspace`를 사용하면 지정한 구간을 일정 간격으로 나눈 배열을 얻을 수 있습니다:

```python
a5 = np.linspace(1, 100)  # 1~100 사이 50개 값 (디폴트 num=50)
print(a5.shape)
print(a5)
v = np.linspace(1, 100, retstep=True)  # (배열, 간격) 튜플 반환
print("step:", v[1])    # 간격 값
print(v[0])             # 생성된 배열
a6 = np.linspace(1, 10, num=10)  # 1~10을 10개의 값으로 (즉 1,2,...,10)
print(a6)
```

*출력:*  
```python
(50,)
[  1.           3.02040816   5.04081633 ...  97.97959184 100.        ]
step: 2.020408163265306
[  1.           3.02040816   5.04081633 ...  97.97959184 100.        ]
[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]
``` 

위에서 `a5`는 1부터 100까지 균일 간격으로 50개 값을 만든 것이고, `v`는 `(배열, step)` 형태로 반환되어 간격(step)이 약 `2.02`임을 보여줍니다. `a6`는 1부터 10까지 10개 값을 (정수 1,2,...,10) 생성했습니다.

### 난수 배열 생성

NumPy의 `np.random` 서브패키지를 이용하면 **무작위 값**으로 채워진 배열을 만들 수 있습니다. 재현 가능한 난수 생성을 위해 **시드(seed)**를 설정할 수 있습니다 (`np.random.seed(정수)`). 주요 난수 관련 함수:

- **`np.random.rand(d0, d1, ...)`**: 0~1 사이 **균일분포**(Uniform)에서 표본을 뽑아 지정한 shape의 배열 생성.  
- **`np.random.randn(d0, d1, ...)`**: 평균0, 표준편차1의 **표준 정규분포**(Normal)에서 표본 생성.  
- **`np.random.normal(loc, scale, size)`**: 평균 `loc`, 표준편차 `scale`인 정규분포에서 표본 생성.  
- **`np.random.randint(low, high, size)`**: `low`부터 `high`**미만** 사이에서 정수를 뽑아 배열 생성. (`high` 생략시 0~low 미만)  
- **`np.random.choice(a, size, replace, p)`**: 주어진 1차원 배열 `a`에서 임의 추출. (복원추출 여부 `replace`, 각 요소 선택 확률 `p` 지정 가능)

예를 들어 균일분포 난수 및 정수 난수를 생성해보겠습니다:

```python
np.random.seed(0)                # 시드 고정
print(np.random.rand(5))         # 0~1 사이 실수 5개
a = np.random.rand(5, 6, 7)      # 5x6x7 3차원 배열
print(a.shape)
b = np.random.randint(10, 20, size=(5, 3))  # 10~19 사이 정수로 5x3 배열
print(b)
```

*출력:*  
```python
[0.5488135  0.71518937 0.60276338 0.54488318 0.4236548 ]
(5, 6, 7)
[[14 13 13]
 [18 18 17]
 [10 13 18]
 [17 17 11]
 [18 14 17]]
``` 

위에서 `np.random.rand(5)`는 길이 5의 1차원 배열을 반환했고, `np.random.rand(5,6,7)`은 5x6x7 배열을 생성했습니다. `randint(10,20)`은 [10,20) 구간의 정수를 생성하며, 위 `b` 배열에서 모든 원소가 10~19 범위인 것을 볼 수 있습니다.

정규분포 난수의 예시로, 표준정규분포에서 5개의 값을 뽑아보겠습니다. 또한 난수 배열의 통계치를 확인해 보겠습니다:

```python
c = np.random.normal(size=5)
print(np.round(c, 2))  # 표준정규분포 난수 5개 (소수 2자리로 출력)
np.random.seed(0)
sample = np.random.choice([1, 2, 3], size=3, replace=False)
print(sample)          # 1,2,3 중 중복없이 3개 선택 (무작위 순열)
```

*출력:*  
```python
[-1.03  0.68 -0.8  -0.69 -0.46]
[3 2 1]
``` 

위 `c`는 평균0, 표준편차1인 정규분포의 표본으로, 대략 절반 정도가 음수, 양수가 섞여 있습니다. `np.random.choice`를 이용해 `[1,2,3]`에서 3개를 비복원 추출하면 `[3 2 1]`처럼 하나의 랜덤 순열이 생성됩니다.

> **참고:** 난수 생성에 시드를 고정하지 않으면 실행할 때마다 다른 난수가 나오지만, 시드를 같은 값으로 설정하면 항상 동일한 난수가 재현됩니다. 

---

## 판다스 (Pandas)

**Pandas 개요:** Pandas는 **행과 열로 이루어진 2차원 테이블 데이터**를 다루는 파이썬 라이브러리로, **Series(1차원)**와 **DataFrame(2차원)**이라는 핵심 데이터 구조를 제공합니다. Database의 테이블이나 Excel 시트처럼 **인덱스(행 식별자)**와 **컬럼 이름(열 식별자)**을 가지며, 강력한 **데이터 인덱싱, 정렬, 집계, 결합** 기능을 지원합니다. Pandas는 파일(CSV, 엑셀)이나 DB로부터 데이터를 읽어오거나, NumPy 배열/딕셔너리로부터 **DataFrame을 직접 생성**할 수 있습니다.

### DataFrame 생성

DataFrame은 여러 가지 방식으로 생성할 수 있습니다. 대표적으로 **딕셔너리**나 **2차원 리스트**로부터 생성하는 방법이 있습니다:

```python
import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]}
df = pd.DataFrame(data)
print(df)
```

*출력:*  
```python
      Name  Age
0    Alice   25
1      Bob   30
2  Charlie   35
``` 

위와 같이 딕셔너리 `data`의 **키를 컬럼 이름**으로, **값 리스트를 컬럼 값**으로 하여 DataFrame `df`를 만들었습니다. Index는 지정하지 않으면 0부터 자동 할당됩니다. 

2차원 리스트로도 생성 가능합니다. 이 경우 **index 이름**과 **columns 이름**을 직접 지정해줄 수 있습니다:

```python
df2 = pd.DataFrame([[1, 2, 3], [4, 5, 6]], 
                   index=['row1', 'row2'], 
                   columns=['A', 'B', 'C'])
print(df2)
```

*출력:*  
```python
      A  B  C
row1  1  2  3
row2  4  5  6
``` 

이처럼 `df2`는 'row1','row2'라는 행 인덱스와 'A','B','C' 컬럼을 가지는 2x3 표 형식의 데이터입니다.

### 데이터 조회와 인덱싱

Pandas DataFrame에서는 **행과 열을 이름 또는 위치**로 선택할 수 있습니다. 주요 인덱싱 방법:
- `DF.loc[행라벨, 열라벨]` : 행과 열을 **이름(label)**으로 선택.
- `DF.iloc[행번호, 열번호]` : 행과 열을 **숫자 위치(index)**로 선택.

예시로, 앞서 생성한 `df`와 `df2`를 사용해 보겠습니다. 새로운 DataFrame `grade`를 만들어 행 인덱스를 문자열로 지정해보겠습니다:

```python
grade = pd.DataFrame({
    'korean': [90, 80, 70, 60, 50],
    'math':   [88, 77, 66, 55, 44]
}, index=['id-1', 'id-3', 'id-2', 'id-5', 'id-4'])
print(grade)
```

*출력:*  
```python
      korean  math
id-1      90    88
id-3      80    77
id-2      70    66
id-5      60    55
id-4      50    44
``` 

위 `grade` DataFrame은 학생ID를 의미하는 행 인덱스 'id-1' ~ 'id-5'와 두 개의 과목 컬럼을 가집니다. 이제 **.loc 인덱서**를 사용하여 데이터 조회를 해보겠습니다:

```python
print(grade.loc['id-1'])               # 행 'id-1'의 전체 데이터 (Series로 반환)
print()
print(grade.loc[['id-2','id-5']])      # 행 'id-2', 'id-5' 선택 (DataFrame으로 반환)
print()
print(grade.loc['id-2':'id-4'])        # 'id-2'부터 'id-4'까지 슬라이싱 (끝 포함)
print()
print(grade.loc['id-2', 'math'])       # 특정 행의 특정 열 값
```

*출력:*  
```python
korean    90
math      88
Name: id-1, dtype: int64

      korean  math
id-2      70    66
id-5      60    55

      korean  math
id-2      70    66
id-5      60    55
id-4      50    44

66
``` 

- `grade.loc['id-1']`은 해당 행의 두 과목 점수를 **Series**로 반환합니다 (인덱스는 컬럼명이 됩니다).  
- `grade.loc[['id-2','id-5']]`는 여러 행을 선택하여 **DataFrame**으로 반환합니다.  
- `grade.loc['id-2':'id-4']`처럼 **슬라이싱**할 경우 **끝 인덱스도 포함**되는 것에 유의하세요.  
- `grade.loc['id-2','math']`는 특정 행의 특정 열, 즉 단일 값(`66`)을 반환합니다.

이제 **.iloc 인덱서**를 사용하여 **정수 위치 기반**으로 동일한 데이터를 조회해봅시다:

```python
print(grade.iloc[0])           # 첫 번째 행 (index 0에 해당, id-1 행)
print()
print(grade.iloc[[1, 3]])      # 두 번째, 네 번째 행 (id-3, id-5)
print()
print(grade.iloc[1:4])         # 1~3번째 행 (슬라이싱, id-3 ~ id-5)
print()
print(grade.iloc[1, 0])        # 두 번째 행, 첫 번째 열 (id-3 행의 korean 점수)
```

*출력:*  
```python
korean    90
math      88
Name: id-1, dtype: int64

      korean  math
id-3      80    77
id-5      60    55

      korean  math
id-3      80    77
id-2      70    66
id-5      60    55

80
``` 

`.iloc`은 파이썬 리스트/넘파이 인덱싱처럼 0부터 시작하는 정수 색인을 사용합니다. 위 결과에서 `iloc[0]`은 첫 행(id-1), `iloc[1:4]`는 1,2,3번째 행 (id-3, id-2, id-5)을 포함하고, `iloc[1,0]`은 id-3의 korean 점수 80을 반환하는 것을 확인할 수 있습니다. 

이 외에도 `DF['컬럼명']`으로 컬럼을 선택하거나, 조건식을 사용한 Boolean 인덱싱 등 다양한 인덱싱 방법을 Pandas는 제공합니다.

### 정렬 (Sorting)

Pandas DataFrame은 **인덱스**나 **특정 컬럼 값**을 기준으로 정렬할 수 있습니다. 정렬 함수:
- `DF.sort_index(axis=0, ascending=True)`: 인덱스 기준 정렬 (`axis=1`이면 컬럼 이름 기준).  
- `DF.sort_values(by=컬럼명, ascending=True)`: 하나 또는 여러 컬럼값 기준 정렬.

예를 들어, `grade` DataFrame을 인덱스와 점수별로 정렬해 보겠습니다:

```python
print("By index (asc):")
print(grade.sort_index())
print("\nBy index (desc):")
print(grade.sort_index(ascending=False))
print("\nBy korean score (asc):")
print(grade.sort_values('korean'))
print("\nBy korean desc, math asc:")
print(grade.sort_values(['korean', 'math'], ascending=[False, True]))
```

*출력:*  
```python
By index (asc):
      korean  math
id-1      90    88
id-2      70    66
id-3      80    77
id-4      50    44
id-5      60    55

By index (desc):
      korean  math
id-5      60    55
id-4      50    44
id-3      80    77
id-2      70    66
id-1      90    88

By korean score (asc):
      korean  math
id-4      50    44
id-5      60    55
id-2      70    66
id-3      80    77
id-1      90    88

By korean desc, math asc:
      korean  math
id-1      90    88
id-3      80    77
id-2      70    66
id-5      60    55
id-4      50    44
``` 

- 인덱스 오름차순 정렬 결과를 보면 'id-1' ~ 'id-5' 순으로 정렬되었습니다. (내림차순의 경우 역순)  
- `sort_values('korean')`은 korean 점수 기준 오름차순입니다.  
- 복수 컬럼으로 정렬할 때 `ascending` 리스트를 전달하여 개별 정렬 순서를 줄 수 있습니다. 위에서 "korean 내림차순, math 오름차순"으로 정렬하여 동일 korean 점수일 경우 math 점수가 작은 순으로 정렬되도록 했습니다.

### 집계와 통계 연산

Pandas는 데이터의 **요약 통계량**을 계산하거나, 그룹별로 집계할 수 있는 다양한 기능을 제공합니다.

**기술 통계 메소드:** `sum()`, `mean()`, `max()`, `min()`, `count()`, `describe()` 등 DataFrame 자체 메서드로 각 컬럼에 대한 통계치를 구할 수 있습니다. 기본적으로 각 컬럼을 Series로 보고 컬럼 방향(행을 따라) 집계하며, `axis=1`로 설정하면 행 방향(열들을 따라) 집계합니다.

예를 들어 `grade` DataFrame의 과목별 평균과 학생별 평균을 구해보겠습니다:

```python
print("Column-wise mean:\n", grade.mean())
print("\nRow-wise mean:\n", grade.mean(axis=1))
```

*출력:*  
```python
Column-wise mean:
 korean    70.0
math      66.0
dtype: float64

Row-wise mean:
id-1    89.0
id-3    78.5
id-2    68.0
id-5    57.5
id-4    47.0
dtype: float64
``` 

위 결과에서 과목별 평균은 korean 70, math 66이고, 각 학생별 평균 점수도 계산되었습니다.

**그룹별 집계 (groupby):** DataFrame을 특정 컬럼 값에 따라 그룹으로 묶은 뒤 집계하는 것이 가능합니다. `DF.groupby('기준컬럼')`으로 그룹 객체를 만들고, 이어서 집계 연산을 적용합니다. 또는 한 번에 `DF.groupby('기준컬럼')['타겟컬럼'].agg(함수)` 형태로 사용할 수도 있습니다.

예를 들어, 부서별 직원 급여의 평균을 구해보겠습니다:

```python
df_dept = pd.DataFrame({'Dept': ['Sales', 'Sales', 'IT', 'IT', 'HR'],
                        'Salary': [200, 250, 300, 220, 270]})
print(df_dept.groupby('Dept')['Salary'].mean())
print()
print(df_dept.groupby('Dept')['Salary'].agg(['mean', 'sum', 'count']))
```

*출력:*  
```python
Dept
HR       270.0
IT       260.0
Sales    225.0
Name: Salary, dtype: float64

        mean  sum  count
Dept                    
HR     270.0  270      1
IT     260.0  520      2
Sales  225.0  450      2
``` 

- 첫 번째 출력은 Dept별 Salary의 평균을 Series로 보여줍니다.  
- 두 번째 출력은 `agg()`에 리스트로 여러 함수를 전달하여 부서별로 Salary의 mean, sum, count를 동시에 구한 결과입니다. 

**사용자 정의 집계 함수**도 전달할 수 있으며, 복수 컬럼에 대해 서로 다른 집계 함수를 적용하는 딕셔너리도 지원합니다.

### 데이터 합치기 (Merge, Join, Concat)

현실 데이터에서는 여러 데이터 소스를 **병합(merge)**하거나 **연결(concatenate)**해야 하는 경우가 많습니다. Pandas는 SQL의 JOIN처럼 두 DataFrame을 키를 기준으로 병합하는 `merge` 메서드와, 단순히 위아래 또는 좌우로 연결하는 `concat` 함수를 제공합니다.

- **`pd.concat([DF1, DF2, ...], axis=0)`**: 행 방향으로 DataFrame들을 연결 (세로로 붙이기). `axis=1`이면 열 방향으로 붙입니다. 인덱스를 무시하려면 `ignore_index=True`.  
- **`DF1.merge(DF2, how='inner', on='키컬럼')`**: 키 컬럼 기준으로 두 DataFrame을 병합. `how`는 'inner'(교집합), 'outer'(합집합), 'left', 'right' 조인을 지정합니다. (left/right는 첫 번째 혹은 두 번째 프레임 기준)  

먼저 `concat`을 사용해보겠습니다. 다음과 같이 간단한 DataFrame 두 개를 만들어서 이어 붙입니다:

```python
df1 = pd.DataFrame({'Val': [1, 2]})
df2 = pd.DataFrame({'Val': [3, 4]})
print("Vertical concat:\n", pd.concat([df1, df2], ignore_index=True))
print("\nHorizontal concat:\n", pd.concat([df1, df2], axis=1))
```

*출력:*  
```python
Vertical concat:
    Val
0    1
1    2
2    3
3    4

Horizontal concat:
    Val  Val
0    1    3
1    2    4
``` 

- 세로 연결 결과 인덱스가 0~3으로 재배열되었고, 값이 위아래로 붙었습니다.  
- 가로 연결 결과는 인덱스를 기준으로 두 DataFrame이 좌우로 합쳐져 두 개의 'Val' 컬럼이 나왔습니다 (0행:1과3, 1행:2와4).

이제 `merge`를 사용해 두 테이블을 조인해보겠습니다. 예를 들어 직원 정보 `df1`과 부서 정보 `df2`를 ID 필드로 병합하면:

```python
df1 = pd.DataFrame({'ID': [1, 2, 3], 'Name': ['A', 'B', 'C']})
df2 = pd.DataFrame({'ID': [2, 3, 4], 'Dept': ['X', 'Y', 'Z']})
print("df1:\n", df1)
print("\ndf2:\n", df2)
print("\nInner merge on ID:\n", df1.merge(df2, on='ID', how='inner'))
print("\nOuter merge on ID:\n", df1.merge(df2, on='ID', how='outer'))
```

*출력:*  
```python
df1:
    ID Name
0   1    A
1   2    B
2   3    C

df2:
    ID Dept
0   2    X
1   3    Y
2   4    Z

Inner merge on ID:
    ID Name Dept
0   2    B    X
1   3    C    Y

Outer merge on ID:
    ID Name Dept
0   1    A  NaN
1   2    B    X
2   3    C    Y
3   4  NaN    Z
``` 

- **Inner Join** 결과: df1과 df2에 모두 존재하는 ID(2,3)에 대해서만 병합되어 Name과 Dept가 모두 채워진 행이 나옵니다.  
- **Outer Join** 결과: 어느 한쪽에만 있어도 모두 포함 (ID 1은 df2에 Dept 정보가 없어 NaN, ID 4는 df1에 Name이 없어 NaN으로 표시).  

이처럼 `merge`를 통해 다양한 join 연산을 수행할 수 있습니다. (`on`으로 키 컬럼 지정, 또는 `left_on`, `right_on`으로 서로 다른 컬럼명도 사용 가능, 동일 컬럼명이 겹칠 때는 `suffixes`로 접미어 지정 가능)

---

## Matplotlib 한글 처리 및 환경설정

Matplotlib를 사용할 때 **한글 폰트 문제**로 그래프의 한글 텍스트가 깨지는 현상이 발생합니다. 기본 폰트에는 한글 글꼴이 포함되어 있지 않기 때문입니다. 이를 해결하려면 **폰트를 한글이 지원되는 폰트로 변경**해야 합니다.

한글 폰트 설정 방법은 두 가지가 있습니다:
1. **Matplotlib 설정 파일**을 수정하여 전역 설정을 바꾸는 방법 (한번 설정하면 계속 유효).  
2. **코드 상에서 폰트 설정**을 변경하는 방법 (각 세션마다 설정 필요).

여기서는 코드에서 설정을 변경하는 방법을 사용해보겠습니다. Matplotlib의 `rcParams`를 통해 폰트를 변경할 수 있습니다. 예를 들어 Windows 사용자라면 "Malgun Gothic", Mac 사용자는 "AppleGothic" 등의 한글 폰트 이름을 지정합니다. 또한 한글 표시를 위해 **마이너스 기호 깨짐 방지 설정**도 함께 합니다:

```python
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Malgun Gothic'    # or 'AppleGothic' on macOS, etc.
plt.rcParams['axes.unicode_minus'] = False       # 한글 폰트 사용 시 마이너스 '-' 깨짐 방지
```

위 코드를 실행한 이후에는 그래프 제목, 축 레이블 등에 한글을 넣어도 제대로 표시됩니다. (주의: 해당 폰트가 시스템에 설치되어 있어야 합니다)  

> **참고:** 설정이 제대로 되었는지 `plt.rcParams["font.family"]`를 출력해 확인할 수 있습니다. 또한 Matplotlib 3.4버전부터는 `matplotlib.font_manager`의 `findfont`가 자동으로 한글 폰트를 찾아주는 기능이 개선되어, `NanumGothic` 폰트 등이 설치된 경우 보다 쉽게 처리되는 경우도 있습니다.

## Matplotlib 개요

Matplotlib는 **데이터 시각화**를 위한 가장 표준적인 파이썬 라이브러리입니다. 2D 그래프를 그리는 기능을 제공하며, 확장 패키지를 통해 3D 그래프도 지원합니다. Pandas나 Seaborn 등의 고수준 시각화 라이브러리도 내부적으로 Matplotlib를 사용하여 그래프를 생성합니다.

Matplotlib의 가장 기본 객체는 **Figure**와 **Axes**입니다. Figure는 그래프가 그려질 전체 도화지에 해당하고, Axes는 그 도화지(Figure) 안에 실제 그래프가 그려지는 영역입니다. 하나의 Figure에 여러 Axes(서브 플롯)을 배치하여 여러 개의 그래프를 한꺼번에 그릴 수 있습니다.

- **Figure**: 전체 그래프 캔버스 (예: 한 개의 창 또는 그림 파일 전체). `plt.figure()`로 생성.  
- **Axes**: 개별 플롯(좌표축)의 영역. 하나의 Figure에 여러 Axes를 넣을 수 있음. `fig.add_subplot()` 또는 `plt.subplots()`로 생성.  
- **Axis (x축, y축)**: 각 Axes의 가로축, 세로축으로 눈금(ticks)과 레이블(label)을 가짐.  
- **Title**: Axes 또는 Figure의 제목.  
- **Legend (범례)**: 하나의 Axes에 여러 개의 데이터 시리즈(그래프 선 등)가 있는 경우 각각을 설명하는 표식.

Matplotlib에서는 **상태 유지 인터페이스**(pyplot)와 **객체 지향 인터페이스**를 모두 사용할 수 있습니다. 간단하게는 `plt.plot()` 등을 사용하여 바로 그릴 수 있지만, 복잡한 플롯은 Figure/Axes 객체를 직접 생성하고 다루는 방법이 보다 유연합니다.

예를 들어, 한 개의 Figure에 두 개의 Axes를 나란히 그려보겠습니다:

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y = np.sin(x)
z = np.cos(x)

fig, axes = plt.subplots(1, 2, figsize=(8, 3))  # 1행 2열의 Axes 생성
axes[0].plot(x, y, color='orange')
axes[0].set_title("sin x")
axes[0].set_xlabel("x")
axes[0].set_ylabel("sin x")

axes[1].plot(x, z, color='green')
axes[1].set_title("cos x")
axes[1].set_xlabel("x")
axes[1].set_ylabel("cos x")

plt.tight_layout()  # 레이아웃 조정
plt.show()
```

위 코드에서는 `plt.subplots()`를 통해 두 개의 Axes를 가진 Figure를 만들고, 각 Axes에 sin 그래프와 cos 그래프를 그렸습니다. `axes`는 numpy 배열처럼 인덱싱하여 각 축을 다룰 수 있습니다.

## Matplotlib 주요 그래프 그리기

Matplotlib를 이용하여 그릴 수 있는 **대표적인 그래프 종류**로 선 그래프, 산점도, 막대그래프, 파이차트, 히스토그램, 박스플롯 등이 있습니다. 각각의 사용 방법과 예시는 다음과 같습니다.

### 선 그래프 (Line Plot)

선 그래프는 **시간 흐름에 따른 변화**나 함수의 추이를 나타낼 때 주로 사용합니다. `plt.plot(x, y)` 함수를 사용하여 그릴 수 있습니다. x 좌표와 y 좌표 배열을 인수로 전달하면 해당 점들을 선으로 연결한 그래프를 그립니다. 

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y = np.sin(x)
plt.plot(x, y, color='orange', marker='')  # x, y 값으로 선 그래프
plt.xlabel("x")        # x축 레이블
plt.ylabel("sin x")    # y축 레이블
plt.title("Sine Wave") # 그래프 제목
plt.show()
``` 

 ([image]()) *Sine 함수의 선 그래프.*  

위 예에서는 0부터 10까지의 구간을 100등분한 x 값에 대해 sin 함수를 계산하여 선 그래프로 표시했습니다. `marker` 인자를 생략하거나 `''`로 하면 점 표시는 생략되고 선만 그려집니다. (marker='o' 등으로 설정하면 각 데이터 점에 마커도 표시 가능합니다.) 

여러 개의 plot을 한 Axes에 그리면 자동으로 여러 선이 겹쳐 그려지며, `label` 인자를 주고 `plt.legend()`를 호출하면 범례를 표시할 수 있습니다.

### 산점도 (Scatter Plot)

산점도는 **두 변수 사이의 관계**나 데이터 분포의 군집을 볼 때 사용합니다. `plt.scatter(x, y)` 함수로 x-y 좌표상의 점들을 표시합니다. 옵션으로 점의 색깔(`c` 또는 `color`), 모양(`marker`), 투명도(`alpha`) 등을 지정할 수 있습니다.

```python
import numpy as np
np.random.seed(3)
x = np.random.rand(50)
y = np.random.rand(50)
plt.scatter(x, y, color='green', marker='o', alpha=0.7)
plt.title("Random Scatter")
plt.xlabel("X value")
plt.ylabel("Y value")
plt.show()
```

 ([image]()) *임의의 두 변수 산점도.*  

위 산점도는 0~1 범위의 난수 50쌍을 녹색 원 형태의 마커로 표시한 것입니다. 산점도를 통해 점들이 특정 영역에 밀집하는지(군집), 또는 대각선 형태로 분포하는지(상관관계) 등을 파악할 수 있습니다.

### 막대그래프 (Bar Plot)

막대그래프는 **카테고리별 값의 크기 비교**에 많이 사용됩니다. `plt.bar(x, height)` 함수를 사용하며, `x`는 카테고리 (보통 문자열 목록)이고 `height`는 해당 값 리스트입니다. `plt.barh`를 쓰면 가로 막대그래프도 그릴 수 있습니다.

```python
categories = ['A', 'B', 'C']
values = [5, 8, 3]
plt.bar(categories, values, color='skyblue')
plt.title("Category Values")
plt.xlabel("Category")
plt.ylabel("Value")
plt.show()
```

 ([image]()) *세 개의 카테고리(A, B, C) 막대그래프.*  

위 예에서 A, B, C 세 범주의 값을 시각적으로 비교할 수 있습니다. B의 값이 가장 높고 C가 가장 낮다는 것을 막대 높이로 한눈에 파악 가능합니다. 필요에 따라 각 막대 위에 값 레이블을 추가하거나 (`plt.text` 이용), 여러 범주의 막대를 그룹으로 묶어 표현할 수도 있습니다.

### 파이 차트 (Pie Chart)

파이 차트는 **전체 대비 부분의 비율**을 부채꼴 형태로 나타냅니다. `plt.pie(x, labels=..., autopct=...)` 함수로 그릴 수 있으며, `x`는 각 조각의 값 (비율로 자동 변환)입니다. `autopct` 인자로 비율 표시 형식을 지정할 수 있습니다 (예: '%1.1f%%'는 소수점1자리 퍼센트).

```python
values = [50, 30, 20]
labels = ['B', 'A', 'C']
plt.pie(values, labels=labels, autopct='%1.1f%%', colors=['green','red','blue'])
plt.title("Category Proportion")
plt.show()
```

 ([image]()) *범주 A, B, C의 비율을 나타낸 파이차트.*  

예제에서는 전체의 50%, 30%, 20%를 차지하는 3개의 범주를 파이차트로 나타냈습니다. 각 조각에는 비율이 표시되어 있으며, `explode` 파라미터를 사용하여 특정 조각을 돌출시킬 수도 있습니다. 파이차트는 조각이 많으면 시각적으로 비교가 어려워지므로, **범주 수가 적을 때** 주로 사용됩니다.

### 히스토그램 (Histogram)

히스토그램은 **데이터 분포**를 구간별 빈도로 보여줍니다. 연속형 데이터의 분포 형태(치우침, 균등성 등)를 파악하는 데 유용합니다. `plt.hist(data, bins)`로 사용하며, `bins`는 구간 개수 또는 경계값 리스트입니다.

```python
data = np.random.randn(1000)  # 평균0, 표준편차1인 정규분포 난수 1000개
plt.hist(data, bins=30, color='purple', edgecolor='black')
plt.title("Histogram of Data")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.show()
```

 ([image]()) *정규분포를 따르는 랜덤 데이터의 히스토그램.*  

위 히스토그램에서 데이터가 평균 0을 중심으로 좌우 대칭적으로 분포하고 대부분 -2~2 사이에 몰려 있음을 볼 수 있습니다. `edgecolor='black'`으로 막대 경계선을 그려 구분을 뚜렷하게 했습니다. bins 개수를 늘리면 더 세밀한 분포를, 줄이면 더 거친 분포를 보여주므로 적절한 값을 선택해야 합니다.

### 박스플롯 (Boxplot)

박스플롯은 **데이터 분포의 요약 통계**(중앙값, 사분위 범위, 이상치)를 그림으로 나타냅니다. `plt.boxplot(data_list)` 형태로 사용하며, 여러 데이터 리스트를 전달하면 각각의 분포를 나란히 비교할 수 있습니다.

```python
data1 = np.random.normal(0, 1, size=100)   # 평균0, 표준편차1
data2 = np.random.normal(2, 1.5, size=100) # 평균2, 표준편차1.5
plt.boxplot([data1, data2], labels=['Data1', 'Data2'])
plt.title("Boxplot Example")
plt.ylabel("Value")
plt.show()
```

 ([image]()) *두 개의 데이터셋에 대한 박스플롯.*  

박스플롯에서 **상자(box)**는 1사분위수(Q1)와 3사분위수(Q3)를 나타내고, 상자 안의 가로선은 중앙값(median)입니다. 상자 위아래의 수직선(whisker)은 Q1-1.5IQR과 Q3+1.5IQR 범위(즉 통상적인 데이터 범위)를 나타내며, 범위를 벗어난 점들은 **이상치(outlier)**로 표시됩니다. 위 예시에서 Data2 분포는 Data1보다 중앙값이 높고 분산이 더 큰 것을 알 수 있습니다.

---

## Pandas 시각화

Pandas는 Series와 DataFrame 객체에 `.plot()` 메서드를 제공하여 **Matplotlib 기반의 시각화**를 쉽게 할 수 있도록 합니다. 이는 데이터 분석 단계에서 빠르게 시각화를 확인하는 데 유용합니다. `Series.plot`이나 `DataFrame.plot`을 호출하면 내부적으로 Matplotlib을 사용하여 그래프를 그리고, 추가적인 꾸미기(제목, 축라벨 등)는 Matplotlib 함수를 함께 호출하여 적용합니다.

`DataFrame.plot(kind='...')` 또는 `Series.plot(kind='...')`에서 `kind` 옵션으로 그래프 종류를 지정할 수 있습니다:  
- `'line'` (기본값) – 선그래프  
- `'bar'` / `'barh'` – 세로 / 가로 막대그래프  
- `'hist'` – 히스토그램  
- `'box'` – 박스플롯  
- `'kde'` – 커널밀도추정 그래프 (연속분포 밀도)  
- `'pie'` – 파이차트  
- `'scatter'` – 산점도 (`DataFrame.plot.scatter(x='col1', y='col2')` 같이 호출)

예를 들어, Series의 값 분포를 막대그래프로 그리고, 제목과 축라벨을 지정하는 두 가지 방법은 다음과 같습니다. 첫 번째 방법은 `matplotlib.pyplot`을 이용하는 것이고, 두 번째는 `plot` 메서드의 인자를 사용하는 것입니다:

```python
import pandas as pd
import matplotlib.pyplot as plt

s = pd.Series([5, 3, 8], index=['A', 'B', 'C'])

# 방법 1: plot() 그리고 plt 사용해 꾸미기
s.plot(kind='bar')
plt.title("Values by Category")
plt.ylabel("Value")
plt.show()

# 방법 2: plot() 메서드의 인자 사용
s.plot(kind='bar', title="Values by Category", ylabel='Value', color='skyblue')
plt.show()
``` 

위와 같이 Pandas의 plot 기능을 사용하면 **한 줄로 그래프를 그리고**, 바로 이어서 `plt` 함수를 써서 꾸밀 수 있습니다. 두 번째 방법처럼 `title`, `ylabel`, `color` 등을 인자로 주면 편리하게 설정 가능합니다 (Matplotlib 객체를 직접 다루지 않고도 주요 속성 지정).

DataFrame의 경우 하나의 `plot()` 호출로 **모든 수치형 컬럼을 한꺼번에** 그래프화합니다. 기본은 각 컬럼을 y값 시리즈로 보고 x축을 인덱스로 사용하는 선그래프입니다. 만약 막대그래프 등으로 그리고 싶다면 `df.plot(kind='bar')`처럼 `kind`를 지정하면 됩니다. 

예를 들어, `tips`라는 DataFrame에서 성별(`sex`)별 손님 수를 막대로 나타내고, 성별과 흡연여부별 교차 빈도를 그룹막대로 나타낼 수 있습니다 (피벗 테이블 + plot 사용):

```python
# 성별에 따른 고객 수 막대그래프
sex_counts = tips['sex'].value_counts()  # Series (색인: Male/Female, 값: 빈도)
sex_counts.plot(kind='bar', rot=0)
plt.title("Count by Gender")
plt.ylabel("Count")
plt.show()

# 성별 및 흡연여부에 따른 고객 수 (중복 그룹) - 세로 쌓은 막대그래프
pivot = tips.pivot_table(index='sex', columns='smoker', values='total_bill', aggfunc='count')
pivot.plot(kind='bar', stacked=True)
plt.title("Count by Gender and Smoker")
plt.ylabel("Count")
plt.legend(title='Smoker')
plt.show()
```

위 코드에서 `value_counts()`로 성별 빈도를 구한 뒤 바로 `plot`으로 시각화했고, 피벗테이블을 사용해 성별/흡연별 이차원 빈도표를 구한 뒤 막대그래프로 나타냈습니다. `stacked=True`로 설정하면 누적 막대로 표시되어 전체 길이 대비 구성 비율을 함께 볼 수 있습니다.

Pandas의 plot은 내부적으로 Matplotlib를 사용하기 때문에, **Matplotlib의 스타일 설정이나 폰트 설정**도 그대로 적용됩니다. 예를 들어 앞서 설정한 한글 폰트를 Pandas plot에도 사용할 수 있고, `plt.style.use('ggplot')` 등의 스타일 지정도 동일하게 반영됩니다.

마지막으로, **산점도 그래프**를 DataFrame에서 그리는 방법은 `DataFrame.plot.scatter(x='컬럼1', y='컬럼2')`를 사용하는 것입니다. 예를 들어 팁 데이터셋(`tips`)에서 팁과 총액의 관계를 산점도로 그리려면:

```python
tips.plot(kind="scatter", x="total_bill", y="tip", alpha=0.3)
plt.title("Tip vs Total Bill")
plt.show()
``` 

이처럼 Pandas의 내장 시각화 기능은 간편하지만, 세부 조정은 Matplotlib보다 제한될 수 있습니다. 복잡한 커스터마이징이 필요하다면 Matplotlib 객체를 직접 다루는 것이 좋지만, **데이터를 빠르게 파악하거나 보고서에 간단히 포함하는 용도**로는 Pandas plot 기능이 매우 유용합니다.

